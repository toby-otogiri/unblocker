<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Overdrive Unblocker Six Hazel</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 20px; background: #f0f0f0; }
        h1 { color: #333; }
        button { padding: 10px 20px; font-size: 16px; cursor: pointer; background: #007bff; color: white; border: none; border-radius: 5px; }
        button:hover { background: #0056b3; }
        input, textarea { margin: 10px; padding: 8px; width: 320px; border: 1px solid #ccc; border-radius: 4px; }
        textarea { vertical-align: top; height: 100px; }
    </style>
</head>
<body>
    <h1>Overdrive Unblocker Six Hazel</h1>
    <p>Unblock sites or run custom JavaScript across multiple tabs!</p>
    <input id="targetUrl" type="text" placeholder="https://example.com">
    <button onclick="runUnblocker()">Unblock URL</button>
    <br>
    <textarea id="manualScript" placeholder="Paste your JavaScript here (e.g., alert('Hello!'))"></textarea>
    <button onclick="runManualScript()">Run Manual Script</button>

    <script>
        // Proxy list with fallbacks
        const proxyList = [
            "https://interstellar-proxy.herokuapp.com/", // Replace with verified working proxies
            "https://holyunblocker.net/",
            "https://ultraviolet-proxy.glitch.me/",
            "https://proxyium.com/",
            "data:text/html,<h1>Unblocker Fallback</h1>"
        ];

        const stealthChannel = new BroadcastChannel('unblocker-six-hazel');
        const scriptQueue = [];

        // Fetch JavaScript from proxied source
        async function fetchJsFromSource(sourceUrl) {
            for (let proxy of proxyList) {
                try {
                    const url = proxy.startsWith("data:") ? sourceUrl : `${proxy}${sourceUrl}`;
                    const response = await fetch(url, { mode: 'no-cors', cache: 'no-store' });
                    const text = await response.text();
                    const scripts = text.match(/<script[^>]*>([\s\S]*?)<\/script>/gi)?.map(s => 
                        s.replace(/<script[^>]*>|<\/script>/gi, "").trim()
                    ) || [];
                    return scripts.length ? scripts : [text];
                } catch (e) {
                    console.warn(`Proxy ${proxy} failed:`, e);
                    continue;
                }
            }
            return [`alert("All proxies failed - check console or update proxy list")`];
        }

        // Spread JavaScript to multiple tabs
        function spreadToTabs(jsCode, maxTabs = 5) {
            scriptQueue.push(...jsCode);

            const spawnTab = (i) => {
                setTimeout(() => {
                    const tab = window.open("about:blank", `_blank${i}`, "noopener");
                    if (tab) {
                        tab.document.write(`
                            <script>
                                const ch = new BroadcastChannel('unblocker-six-hazel');
                                ch.onmessage = (e) => {
                                    if (e.data.type === 'exec') {
                                        try { (new Function(e.data.code))(); } catch(err) { console.error(err); }
                                    }
                                };
                            </script>
                        `);
                    }
                }, Math.random() * 500); // Random delay for stealth
            };

            for (let i = 0; i < maxTabs; i++) spawnTab(i);

            scriptQueue.forEach(code => 
                stealthChannel.postMessage({ type: 'exec', code })
            );
        }

        // Core unblocker function
        async function overdriveUnblocker(targetUrl) {
            const jsCode = await fetchJsFromSource(targetUrl);
            if (jsCode && jsCode.length) {
                console.log("Extracted JS:", jsCode);
                spreadToTabs(jsCode);
            } else {
                console.log("No JavaScript extracted.");
            }
        }

        // Execute in current tab
        stealthChannel.onmessage = (e) => {
            if (e.data.type === 'exec') {
                try { (new Function(e.data.code))(); } catch (err) { console.error(err); }
            }
        };

        // UI triggers
        function runUnblocker() {
            const url = document.getElementById("targetUrl").value.trim();
            if (url) overdriveUnblocker(url);
            else alert("Please enter a valid URL!");
        }

        function runManualScript() {
            const script = document.getElementById("manualScript").value.trim();
            if (script) spreadToTabs([script]);
            else alert("Please enter some JavaScript!");
        }
    </script>
</body>
</html>
 

    
